require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { isAuthorized, send } = require('./utils/helpers');
const {
  handleStatusCommand,
  handleLogsCommand,
  handleBackupCommand,
  handleUpdateCommand
} = require('./commands');

const bot = new TelegramBot(process.env.TG_BOT_TOKEN, { polling: true });

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Docker –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
require('./utils/docker').checkDockerConnection()
  .then(() => send('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Docker'))
  .catch(err => {
    send(`‚ùå –û—à–∏–±–∫–∞ Docker: ${err.message}`);
    process.exit(1);
  });

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, (msg) => {
  if (!isAuthorized(msg)) return;
  
  const commands = [
    'ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
    '/status ‚Äî –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã',
    '/logs ‚Äî –õ–æ–≥–∏ n8n',
    '/backup ‚Äî –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø (n8n + PostgreSQL)',
    '/update ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ n8n',
    '/db_backup ‚Äî –¢–æ–ª—å–∫–æ –±—ç–∫–∞–ø –ë–î'
  ].join('\n');
  
  send(commands);
});

bot.onText(/\/status/, handleStatusCommand);
bot.onText(/\/logs/, handleLogsCommand);
bot.onText(/\/backup/, handleBackupCommand);
bot.onText(/\/update/, handleUpdateCommand);

// –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ç–∫–∞–ø–∞ —Ç–æ–ª—å–∫–æ –ë–î
bot.onText(/\/db_backup/, async (msg) => {
  if (!isAuthorized(msg)) return;
  
  try {
    await require('./commands/backup').backupDatabaseOnly();
    send('‚úÖ –ë—ç–∫–∞–ø PostgreSQL –∑–∞–≤–µ—Ä—à–µ–Ω');
  } catch (err) {
    send(`‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ –ë–î: ${err.message}`);
  }
});
