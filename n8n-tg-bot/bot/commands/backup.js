const { exec } = require('child_process');
const path = require('path');
const fs = require('fs');
const { send } = require('../utils/helpers');
const { dockerCommand } = require('../utils/docker');

async function backupDatabaseOnly() {
  return new Promise((resolve, reject) => {
    exec('/app/backup_scripts/backup_postgres.sh', (error, stdout, stderr) => {
      if (error) return reject(new Error(stderr || error.message));
      resolve(stdout);
    });
  });
}

async function handleBackupCommand(msg) {
  try {
    await send('üîÑ –ù–∞—á–∏–Ω–∞—é –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø (n8n + PostgreSQL)...');
    
    // –ë—ç–∫–∞–ø PostgreSQL
    await backupDatabaseOnly();
    
    // –ë—ç–∫–∞–ø —Ñ–∞–π–ª–æ–≤ n8n
    await new Promise((resolve, reject) => {
      exec('/app/backup_scripts/backup_n8n.sh', (error, stdout, stderr) => {
        if (error) return reject(new Error(stderr || error.message));
        resolve(stdout);
      });
    });

    await send('‚úÖ –í—Å–µ –±—ç–∫–∞–ø—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã');
  } catch (err) {
    await send(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: ${err.message}`);
  }
}

module.exports = {
  handleBackupCommand,
  backupDatabaseOnly
};
