#!/bin/bash
# –ò—Å–ø–æ–ª—å–∑—É–µ–º bash, –Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –¥–ª—è 100% —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
set -e

# --- –ü–†–û–í–ï–†–ö–ê –ò –ü–ï–†–ï–ó–ê–ü–£–°–ö –ß–ï–†–ï–ó BASH ---
# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ bash, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω —á–µ—Ä–µ–∑ sh
if [ -z "$BASH_VERSION" ]; then
    echo "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º bash..."
    exec bash "$0" "$@"
fi

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
INSTALL_DIR="/opt/n8n-install"

# --- –§–£–ù–ö–¶–ò–ò-–ì–ï–ù–ï–†–ê–¢–û–†–´ –§–ê–ô–õ–û–í ---

# –°–æ–∑–¥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Dockerfile.n8n
create_dockerfile() {
cat <<EOF > "${INSTALL_DIR}/Dockerfile.n8n"
# –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ n8n
FROM n8nio/n8n:latest

USER root

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ apk (Alpine)
# –í–µ—Ä—Å–∏—è –±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è pip
RUN apk add --no-cache --virtual .build-deps \\
    bash \\
    curl \\
    git \\
    make \\
    g++ \\
    gcc \\
    python3 \\
    py3-pip \\
    libffi-dev \\
    openssl-dev \\
    ffmpeg

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python-–±–∏–±–ª–∏–æ—Ç–µ–∫ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å requirements.txt, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏
# COPY requirements.txt .
# RUN if [ -f requirements.txt ]; then \\
#         pip3 install --no-cache-dir -r requirements.txt; \\
#     fi

# –û—Å–Ω–æ–≤–Ω—ã–µ npm-–ø–∞–∫–µ—Ç—ã (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ –æ–±—Ä–∞–∑)
RUN npm install -g n8n-nodes-base n8n-nodes-chatgpt-tools

USER node
EOF
}

# –°–æ–∑–¥–∞–µ—Ç docker-compose.yml
create_compose_file() {
cat <<EOF > "${INSTALL_DIR}/docker-compose.yml"
services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=\${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt-data:/letsencrypt"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik-dashboard.rule=Host(\`\${SUBDOMAIN_TRAEFIK}.\${BASE_DOMAIN}\`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
    networks:
      - web

  postgres:
    image: postgres:15
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=\${POSTGRES_DB}
      - POSTGRES_USER=\${POSTGRES_USER}
      - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal

  redis:
    image: redis:alpine
    container_name: redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - internal

  n8n:
    build:
      context: .
      dockerfile: Dockerfile.n8n
    container_name: n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=\${POSTGRES_DB}
      - DB_POSTGRESDB_USER=\${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=\${POSTGRES_PASSWORD}
      - N8N_HOST=\${SUBDOMAIN_N8N}.\${BASE_DOMAIN}
      - WEBHOOK_URL=https://\${SUBDOMAIN_N8N}.\${BASE_DOMAIN}/
      - GENERIC_TIMEZONE=\${TZ}
      - N8N_ENCRYPTION_KEY=\${N8N_ENCRYPTION_KEY}
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.n8n.rule=Host(\`\${SUBDOMAIN_N8N}.\${BASE_DOMAIN}\`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.tls.certresolver=letsencrypt"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - web
      - internal

  postiz:
    image: gitroomhq/gitroom
    container_name: postiz
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.postiz.rule=Host(\`\${SUBDOMAIN_POSTIZ}.\${BASE_DOMAIN}\`)"
      - "traefik.http.routers.postiz.entrypoints=websecure"
      - "traefik.http.routers.postiz.tls.certresolver=letsencrypt"
      - "traefik.http.services.postiz.loadbalancer.server.port=3000"
    networks:
      - web
      - internal

  short-video-maker:
    image: r0ckerboy/short-video-maker:latest
    container_name: short-video-maker
    restart: unless-stopped
    environment:
      - PEXELS_API_KEY=\${PEXELS_API_KEY}
      - TELEGRAM_BOT_TOKEN=\${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_USER_ID=\${TELEGRAM_USER_ID}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.svm.rule=Host(\`\${SUBDOMAIN_SVM}.\${BASE_DOMAIN}\`)"
      - "traefik.http.routers.svm.entrypoints=websecure"
      - "traefik.http.routers.svm.tls.certresolver=letsencrypt"
      - "traefik.http.services.svm.loadbalancer.server.port=8001"
    networks:
      - web

volumes:
  postgres-data:
  n8n-data:
  letsencrypt-data:
  redis-data:

networks:
  web:
  internal:
EOF
}

# --- –ù–ê–ß–ê–õ–û –°–ö–†–ò–ü–¢–ê ---
main() {
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å root)
    if [ "\$(id -u)" -ne 0 ]; then
       whiptail --title "–û—à–∏–±–∫–∞" --msgbox "–°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ root –∏–ª–∏ —á–µ—Ä–µ–∑ sudo." 8 78
       exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ whiptail
    if ! command -v whiptail >/dev/null; then
        echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç 'whiptail' –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞..."
        apt-get update >/dev/null
        apt-get install -y whiptail >/dev/null
    fi

    whiptail --title "–ú–∞—Å—Ç–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏" --msgbox "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞—Å—Ç–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ '–ö–æ–Ω—Ç–µ–Ω—Ç –ó–∞–≤–æ–¥–∞'!\\n\\n–°–µ–π—á–∞—Å –º—ã —Å–æ–±–µ—Ä–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏." 10 78

    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    BASE_DOMAIN=\$(whiptail --title "–®–∞–≥ 1: –î–æ–º–µ–Ω" --inputbox "–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, example.com):" 10 78 "sto-savto82.ru" 3>&1 1>&2 2>&3)
    LETSENCRYPT_EMAIL=\$(whiptail --title "–®–∞–≥ 2: Email" --inputbox "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –¥–ª—è SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤:" 10 78 "user@example.com" 3>&1 1>&2 2>&3)
    POSTGRES_PASSWORD=\$(whiptail --title "–®–∞–≥ 3: –ü–∞—Ä–æ–ª—å –ë–î" --passwordbox "–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Postgres:" 10 78 3>&1 1>&2 2>&3)
    PEXELS_API_KEY=\$(whiptail --title "–®–∞–≥ 4: Pexels API" --inputbox "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Pexels API –∫–ª—é—á:" 10 78 3>&1 1>&2 2>&3)
    TELEGRAM_BOT_TOKEN=\$(whiptail --title "–®–∞–≥ 5: Telegram Bot" --inputbox "–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token:" 10 78 3>&1 1>&2 2>&3)
    TELEGRAM_USER_ID=\$(whiptail --title "–®–∞–≥ 6: Telegram ID" --inputbox "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram User ID:" 10 78 3>&1 1>&2 2>&3)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
    if [ -z "\$BASE_DOMAIN" ] || [ -z "\$LETSENCRYPT_EMAIL" ] || [ -z "\$POSTGRES_PASSWORD" ]; then
        whiptail --title "–û—à–∏–±–∫–∞" --msgbox "–î–æ–º–µ–Ω, email –∏ –ø–∞—Ä–æ–ª—å –ë–î –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞." 8 78
        exit 1
    fi
    
    # –û–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if ! whiptail --title "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö" --yesno "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\\n\\n–î–æ–º–µ–Ω: \$BASE_DOMAIN\\nEmail: \$LETSENCRYPT_EMAIL\\n–ü–∞—Ä–æ–ª—å –ë–î: (—Å–∫—Ä—ã—Ç)\\nPexels API: ...\${PEXELS_API_KEY: -5}\\nTelegram Token: ...\${TELEGRAM_BOT_TOKEN: -5}\\n\\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É?" 15 78; then
        whiptail --title "–û—Ç–º–µ–Ω–∞" --msgbox "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º." 8 78
        exit 0
    fi

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (docker, docker-compose)..."
    apt-get update >/dev/null
    apt-get install -y curl docker.io docker-compose >/dev/null

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    echo "üìÅ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ \$INSTALL_DIR..."
    mkdir -p \$INSTALL_DIR
    cd \$INSTALL_DIR

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è n8n
    N8N_ENCRYPTION_KEY=\$(openssl rand -hex 32)
    echo "üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è n8n."

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env
    echo "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ .env..."
    cat > .env << EOL
TZ=Europe/Moscow
BASE_DOMAIN=\${BASE_DOMAIN}
LETSENCRYPT_EMAIL=\${LETSENCRYPT_EMAIL}
SUBDOMAIN_N8N=n8n
SUBDOMAIN_POSTIZ=postiz
SUBDOMAIN_SVM=svm
SUBDOMAIN_TRAEFIK=traefik
POSTGRES_DB=n8n
POSTGRES_USER=n8n
POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
N8N_ENCRYPTION_KEY=\${N8N_ENCRYPTION_KEY}
PEXELS_API_KEY=\${PEXELS_API_KEY}
TELEGRAM_BOT_TOKEN=\${TELEGRAM_BOT_TOKEN}
TELEGRAM_USER_ID=\${TELEGRAM_USER_ID}
EOL

    # –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ê–ô–õ–û–í –ù–ê –õ–ï–¢–£
    echo "üõ†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."
    create_dockerfile
    create_compose_file

    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã!
    echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ Docker Compose... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
    docker compose up -d --build

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    SUCCESS_MSG="‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞.\\n\\n–ß–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –≤–∞—à–∏ —Å–µ—Ä–≤–∏—Å—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å–∞–º:\\n\\n- n8n:      https://n8n.\$BASE_DOMAIN\\n- Postiz:   https://postiz.\$BASE_DOMAIN\\n- SVM:      https://svm.\$BASE_DOMAIN\\n- Traefik:  https://traefik.\$BASE_DOMAIN"
    whiptail --title "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" --msgbox "\$SUCCESS_MSG" 15 78
}

# –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main
